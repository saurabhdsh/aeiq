import React, { useState, useEffect, useRef } from 'react';
import { LineChart, BarChart2, Percent, DollarSign, Clock, Users, TrendingUp, ArrowUpRight, ArrowDownRight, Gauge, Calendar, BarChart, Cpu, Brain, CheckCircle, Zap, Layers, Activity, Wrench, X, Play } from 'lucide-react';

const TrendIndicator = ({ value, threshold = 0 }) => {
  const isPositive = value >= threshold;
  return isPositive ? (
    <div className="trend trend-up">
      <ArrowUpRight size={14} />
      <span>+{value.toFixed(1)}%</span>
    </div>
  ) : (
    <div className="trend trend-down">
      <ArrowDownRight size={14} />
      <span>{value.toFixed(1)}%</span>
    </div>
  );
};

const MetricCard = ({ title, value, icon: Icon, trend, color }) => {
  return (
    <div style={{ padding: "16px", borderBottom: "1px solid var(--gray-200)" }}>
      <div style={{ display: "flex", alignItems: "center" }}>
        <div className={`icon-circle icon-${color}`} style={{ width: "40px", height: "40px" }}>
          <Icon size={18} />
        </div>
        <div style={{ marginLeft: "16px" }}>
          <h3 style={{ fontSize: "14px", color: "var(--gray-500)", marginBottom: "4px" }}>{title}</h3>
          <div style={{ display: "flex", alignItems: "baseline" }}>
            <span style={{ fontSize: "20px", fontWeight: "700", color: "var(--gray-900)" }}>{value}%</span>
            <div style={{ marginLeft: "8px" }}>
              <TrendIndicator value={trend} />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

const SimpleBarChart = ({ data }) => {
  const maxValue = Math.max(...data.map(d => Math.max(d.onTime, d.fuel, d.crew)));
  const scale = 100 / maxValue;

  return (
    <div style={{ paddingTop: "24px" }}>
      <div style={{ 
        display: "flex", 
        justifyContent: "space-between", 
        alignItems: "center", 
        marginBottom: "16px", 
        padding: "0 24px" 
      }}>
        <h3 style={{ 
          fontSize: "14px", 
          fontWeight: "600", 
          color: "var(--gray-900)", 
          display: "flex", 
          alignItems: "center" 
        }}>
          <BarChart size={16} style={{ marginRight: "8px", color: "var(--gray-500)" }} />
          Performance Trends
        </h3>
        <div style={{ display: "flex", alignItems: "center", gap: "16px" }}>
          <div style={{ display: "flex", alignItems: "center" }}>
            <div style={{ 
              height: "12px", 
              width: "12px", 
              borderRadius: "50%", 
              backgroundColor: "var(--primary)", 
              marginRight: "6px" 
            }}></div>
            <span style={{ fontSize: "12px", color: "var(--gray-600)" }}>On-Time</span>
          </div>
          <div style={{ display: "flex", alignItems: "center" }}>
            <div style={{ 
              height: "12px", 
              width: "12px", 
              borderRadius: "50%", 
              backgroundColor: "var(--success)", 
              marginRight: "6px" 
            }}></div>
            <span style={{ fontSize: "12px", color: "var(--gray-600)" }}>Fuel</span>
          </div>
          <div style={{ display: "flex", alignItems: "center" }}>
            <div style={{ 
              height: "12px", 
              width: "12px", 
              borderRadius: "50%", 
              backgroundColor: "var(--secondary)", 
              marginRight: "6px" 
            }}></div>
            <span style={{ fontSize: "12px", color: "var(--gray-600)" }}>Crew</span>
          </div>
        </div>
      </div>

      <div style={{ padding: "0 24px 24px" }}>
        <div style={{ 
          display: "flex", 
          alignItems: "flex-end", 
          justifyContent: "space-between", 
          height: "160px",
          gap: "8px"
        }}>
          {data.map((day, i) => (
            <div key={i} style={{ flex: "1", display: "flex", flexDirection: "column", alignItems: "center" }}>
              <div style={{ 
                width: "100%", 
                display: "flex", 
                gap: "2px", 
                marginBottom: "6px" 
              }}>
                <div 
                  style={{ 
                    flex: "1", 
                    backgroundColor: "var(--primary)", 
                    borderTopLeftRadius: "2px", 
                    borderTopRightRadius: "2px",
                    height: `${day.onTime * scale}px` 
                  }}
                ></div>
                <div 
                  style={{ 
                    flex: "1", 
                    backgroundColor: "var(--success)", 
                    borderTopLeftRadius: "2px", 
                    borderTopRightRadius: "2px",
                    height: `${day.fuel * scale}px` 
                  }}
                ></div>
                <div 
                  style={{ 
                    flex: "1", 
                    backgroundColor: "var(--secondary)", 
                    borderTopLeftRadius: "2px", 
                    borderTopRightRadius: "2px",
                    height: `${day.crew * scale}px` 
                  }}
                ></div>
              </div>
              <div style={{ fontSize: "12px", color: "var(--gray-500)" }}>{day.date}</div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

const OperationalMetrics = ({ metrics }) => {
  // Add state for AI visualization
  const [showAIVisualization, setShowAIVisualization] = useState(false);
  const [aiSimulationState, setAiSimulationState] = useState('idle'); // idle, running, complete
  const [aiInsights, setAiInsights] = useState([]);
  const [completedOptimizations, setCompletedOptimizations] = useState([]);
  const [optimizationProgress, setOptimizationProgress] = useState(0);
  const [selectedMetric, setSelectedMetric] = useState(null);
  
  // AI Visualization simulation effect
  useEffect(() => {
    if (aiSimulationState === 'running') {
      // Simulate AI processing
      const insightData = [
        { id: 1, type: 'pattern', title: 'Crew Schedule Optimization', description: 'Analyzing patterns in crew fatigue and aircraft turnaround times' },
        { id: 2, type: 'anomaly', title: 'Weather Pattern Analysis', description: 'Detecting weather anomalies affecting flight paths' },
        { id: 3, type: 'prediction', title: 'Maintenance Prediction', description: 'Predicting optimal maintenance scheduling to minimize disruptions' },
        { id: 4, type: 'optimization', title: 'Fuel Route Optimization', description: 'Optimizing flight routes based on real-time weather conditions' },
        { id: 5, type: 'recommendation', title: 'Gate Assignment', description: 'Recommending optimal gate assignments to reduce taxiing time' }
      ];
      
      const optimizations = [
        { id: 1, title: 'Crew Schedule Optimization', value: '+4.2%', impact: 'HIGH', category: 'Crew' },
        { id: 2, title: 'Fuel Route Optimization', value: '+3.7%', impact: 'HIGH', category: 'Fuel' },
        { id: 3, title: 'Maintenance Schedule Refinement', value: '+2.1%', impact: 'MEDIUM', category: 'Maintenance' },
        { id: 4, title: 'Gate Allocation Improvement', value: '+1.8%', impact: 'MEDIUM', category: 'Gate' },
        { id: 5, title: 'Load Factor Enhancement', value: '+3.2%', impact: 'HIGH', category: 'Load' }
      ];

      // Show insights one by one with delays
      let currentInsights = [];
      const insightTimers = insightData.map((insight, index) => {
        return setTimeout(() => {
          currentInsights = [...currentInsights, insight];
          setAiInsights([...currentInsights]);
          
          // Update progress
          setOptimizationProgress(((index + 1) / insightData.length) * 50);
        }, 800 * (index + 1));
      });
      
      // After insights, start showing optimizations one by one
      const completionTimer = setTimeout(() => {
        let currentOptimizations = [];
        
        const optimizationTimers = optimizations.map((opt, index) => {
          return setTimeout(() => {
            currentOptimizations = [...currentOptimizations, opt];
            setCompletedOptimizations([...currentOptimizations]);
            
            // Update progress from 50% to 100%
            setOptimizationProgress(50 + ((index + 1) / optimizations.length) * 50);
            
            // When complete, update state
            if (index === optimizations.length - 1) {
              setTimeout(() => {
                setAiSimulationState('complete');
              }, 1000);
            }
          }, 1000 * (index + 1));
        });
        
        return () => optimizationTimers.forEach(timer => clearTimeout(timer));
      }, 5000);
      
      return () => {
        insightTimers.forEach(timer => clearTimeout(timer));
        clearTimeout(completionTimer);
      };
    }
  }, [aiSimulationState]);

  // AI Visualization component
  const AIVisualization = () => {
    const canvasRef = useRef(null);
    
    useEffect(() => {
      if (!canvasRef.current || aiSimulationState !== 'running') return;
      
      const canvas = canvasRef.current;
      const ctx = canvas.getContext('2d');
      const width = canvas.width;
      const height = canvas.height;
      
      // Particles for the visualization
      const particles = [];
      const connections = [];
      const nodeSize = 4;
      const numParticles = 60;
      
      // Create random particles
      for (let i = 0; i < numParticles; i++) {
        particles.push({
          x: Math.random() * width,
          y: Math.random() * height,
          vx: (Math.random() - 0.5) * 0.5,
          vy: (Math.random() - 0.5) * 0.5,
          color: i < numParticles * 0.7 ? 
                 'rgba(79, 70, 229, 0.6)' : // Primary (indigo) for most nodes
                 'rgba(16, 185, 129, 0.8)'  // Green for "special" nodes
        });
      }
      
      // Animation function
      const animate = () => {
        if (!canvasRef.current || aiSimulationState !== 'running') return;
        
        ctx.clearRect(0, 0, width, height);
        
        // Update and draw connections
        connections.length = 0;
        for (let i = 0; i < particles.length; i++) {
          for (let j = i + 1; j < particles.length; j++) {
            const dx = particles[i].x - particles[j].x;
            const dy = particles[i].y - particles[j].y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            
            if (distance < 80) {
              connections.push({
                from: i,
                to: j,
                opacity: 1 - distance / 80
              });
            }
          }
        }
        
        // Draw connections
        for (const connection of connections) {
          const p1 = particles[connection.from];
          const p2 = particles[connection.to];
          
          ctx.beginPath();
          ctx.moveTo(p1.x, p1.y);
          ctx.lineTo(p2.x, p2.y);
          ctx.strokeStyle = `rgba(79, 70, 229, ${connection.opacity * 0.2})`;
          ctx.lineWidth = connection.opacity * 1.5;
          ctx.stroke();
        }
        
        // Update and draw particles
        for (const particle of particles) {
          particle.x += particle.vx;
          particle.y += particle.vy;
          
          // Bounce off edges
          if (particle.x < 0 || particle.x > width) particle.vx *= -1;
          if (particle.y < 0 || particle.y > height) particle.vy *= -1;
          
          // Draw particle
          ctx.beginPath();
          ctx.arc(particle.x, particle.y, nodeSize, 0, Math.PI * 2);
          ctx.fillStyle = particle.color;
          ctx.fill();
        }
        
        // Pulse animation for the central node
        const time = Date.now() / 1000;
        const pulseSize = nodeSize * 1.5 + Math.sin(time * 4) * nodeSize * 0.5;
        
        // Draw central node (larger and pulsing)
        ctx.beginPath();
        ctx.arc(width / 2, height / 2, pulseSize, 0, Math.PI * 2);
        ctx.fillStyle = 'rgba(16, 185, 129, 0.8)';
        ctx.fill();
        
        // Draw pulse waves from central node
        const numWaves = 3;
        for (let i = 0; i < numWaves; i++) {
          const waveTime = (time + i * 0.5) % 2;
          const waveSize = waveTime * 80; // Max radius of the pulse
          const waveOpacity = 1 - waveTime / 2;
          
          if (waveSize > 0) {
            ctx.beginPath();
            ctx.arc(width / 2, height / 2, waveSize, 0, Math.PI * 2);
            ctx.strokeStyle = `rgba(16, 185, 129, ${waveOpacity * 0.5})`;
            ctx.lineWidth = 2;
            ctx.stroke();
          }
        }
        
        requestAnimationFrame(animate);
      };
      
      // Start animation
      animate();
      
    }, [canvasRef, aiSimulationState]);
    
    return (
      <div style={{ 
        backgroundColor: 'rgba(244, 247, 252, 0.8)', 
        borderRadius: '8px', 
        overflow: 'hidden', 
        marginTop: '20px',
        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05), 0 10px 15px rgba(0, 0, 0, 0.03)'
      }}>
        <div style={{ 
          backgroundColor: '#4F46E5', 
          padding: '12px 16px',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between'
        }}>
          <div style={{ display: 'flex', alignItems: 'center' }}>
            <Brain size={20} color="white" />
            <span style={{ color: 'white', marginLeft: '12px', fontWeight: '600' }}>
              AI Performance Optimization Simulation
            </span>
          </div>
          <div>
            {aiSimulationState === 'idle' && (
              <button 
                onClick={() => setAiSimulationState('running')}
                style={{
                  backgroundColor: 'rgba(255, 255, 255, 0.15)',
                  border: 'none',
                  color: 'white',
                  padding: '6px 12px',
                  borderRadius: '4px',
                  cursor: 'pointer',
                  fontWeight: '500',
                  display: 'flex',
                  alignItems: 'center'
                }}
              >
                <Zap size={14} style={{ marginRight: '6px' }} />
                Run Simulation
              </button>
            )}
            {aiSimulationState === 'running' && (
              <div style={{ 
                display: 'flex', 
                alignItems: 'center',
                backgroundColor: 'rgba(255, 255, 255, 0.15)',
                padding: '6px 12px',
                borderRadius: '4px',
              }}>
                <div style={{ 
                  width: '12px', 
                  height: '12px', 
                  borderRadius: '50%',
                  backgroundColor: '#10B981',
                  marginRight: '8px',
                  animation: 'pulse 1.5s infinite'
                }}></div>
                <span style={{ color: 'white', fontSize: '14px' }}>
                  Processing... {Math.round(optimizationProgress)}%
                </span>
              </div>
            )}
            {aiSimulationState === 'complete' && (
              <div style={{ 
                display: 'flex', 
                alignItems: 'center',
                backgroundColor: 'rgba(255, 255, 255, 0.15)',
                padding: '6px 12px',
                borderRadius: '4px',
              }}>
                <CheckCircle size={14} color="white" style={{ marginRight: '6px' }} />
                <span style={{ color: 'white', fontSize: '14px' }}>
                  Optimization Complete
                </span>
              </div>
            )}
          </div>
        </div>
        
        <div style={{ 
          padding: '20px', 
          display: 'flex',
          position: 'relative',
          minHeight: '300px'
        }}>
          {/* Network visualization */}
          <div style={{ flex: '1', position: 'relative' }}>
            {aiSimulationState === 'running' && (
              <canvas 
                ref={canvasRef} 
                width={400} 
                height={280}
                style={{
                  width: '100%',
                  height: '100%',
                  position: 'absolute',
                  top: 0,
                  left: 0
                }}
              />
            )}
            
            {/* Completed simulation visualization */}
            {aiSimulationState === 'complete' && (
              <div style={{ height: '100%', padding: '10px' }}>
                <h4 style={{ 
                  fontSize: '16px', 
                  fontWeight: '600', 
                  marginBottom: '15px', 
                  display: 'flex', 
                  alignItems: 'center' 
                }}>
                  <Brain size={16} style={{ marginRight: '8px', color: '#4F46E5' }} />
                  AI Performance Optimization Results
                </h4>
                
                {/* Radial chart showing optimization impact */}
                <div style={{ 
                  height: '250px', 
                  display: 'flex', 
                  justifyContent: 'center', 
                  alignItems: 'center', 
                  position: 'relative'
                }}>
                  {/* Central circle with total improvement */}
                  <div style={{ 
                    position: 'absolute',
                    width: '100px',
                    height: '100px',
                    borderRadius: '50%',
                    backgroundColor: '#4F46E5',
                    display: 'flex',
                    flexDirection: 'column',
                    justifyContent: 'center',
                    alignItems: 'center',
                    color: 'white',
                    zIndex: 10,
                    boxShadow: '0 0 20px rgba(79, 70, 229, 0.3)'
                  }}>
                    <div style={{ 
                      fontSize: '24px', 
                      fontWeight: 'bold', 
                      lineHeight: '1'
                    }}>+15.0%</div>
                    <div style={{ 
                      fontSize: '12px',
                      opacity: 0.8,
                      textAlign: 'center',
                      padding: '0 5px'
                    }}>Overall Gain</div>
                  </div>
                  
                  {/* Orbiting indicators */}
                  {[
                    { color: '#10B981', angle: 30, size: 60, value: '+4.2%', label: 'Crew' },
                    { color: '#3B82F6', angle: 100, size: 55, value: '+3.7%', label: 'Fuel' },
                    { color: '#F97316', angle: 170, size: 42, value: '+2.1%', label: 'Maintenance' },
                    { color: '#8B5CF6', angle: 240, size: 40, value: '+1.8%', label: 'Gate' },
                    { color: '#EC4899', angle: 310, size: 53, value: '+3.2%', label: 'Load' }
                  ].map((item, index) => {
                    // Calculate position on a circle
                    const radius = 100; // Distance from center
                    const angleInRadians = (item.angle * Math.PI) / 180;
                    const x = Math.cos(angleInRadians) * radius;
                    const y = Math.sin(angleInRadians) * radius;
                    
                    return (
                      <div 
                        key={index}
                        style={{
                          position: 'absolute',
                          width: `${item.size}px`,
                          height: `${item.size}px`,
                          borderRadius: '50%',
                          backgroundColor: item.color,
                          display: 'flex',
                          flexDirection: 'column',
                          justifyContent: 'center',
                          alignItems: 'center',
                          color: 'white',
                          transform: `translate(${x}px, ${y}px)`,
                          boxShadow: `0 0 15px ${item.color}80`,
                          transition: 'all 0.5s ease-out',
                          animation: `fadeInScale 0.8s ease-out ${index * 0.2}s both`
                        }}
                      >
                        <div style={{ fontSize: `${item.size * 0.35}px`, fontWeight: 'bold', lineHeight: '1' }}>{item.value}</div>
                        <div style={{ fontSize: `${item.size * 0.17}px`, opacity: 0.9 }}>{item.label}</div>
                      </div>
                    );
                  })}
                  
                  {/* Connection lines */}
                  <svg 
                    style={{ 
                      position: 'absolute', 
                      width: '100%', 
                      height: '100%', 
                      zIndex: -1 
                    }}
                    viewBox="-150 -150 300 300"
                  >
                    {[30, 100, 170, 240, 310].map((angle, index) => {
                      const angleInRadians = (angle * Math.PI) / 180;
                      const x = Math.cos(angleInRadians) * 100;
                      const y = Math.sin(angleInRadians) * 100;
                      
                      return (
                        <line 
                          key={index}
                          x1="0" 
                          y1="0"
                          x2={x} 
                          y2={y}
                          stroke="#E5E7EB"
                          strokeWidth="1"
                          strokeDasharray="3,3"
                          style={{
                            animation: `drawLine 1s ease-out ${index * 0.2}s forwards`
                          }}
                        />
                      );
                    })}
                  </svg>
                </div>
              </div>
            )}
          </div>
          
          {/* Insights panel */}
          <div style={{ 
            flex: '1',
            padding: '0 20px',
            display: 'flex',
            flexDirection: 'column'
          }}>
            <div style={{ marginBottom: '16px' }}>
              <h4 style={{ fontSize: '16px', fontWeight: '600', marginBottom: '12px', display: 'flex', alignItems: 'center' }}>
                <Brain size={16} style={{ marginRight: '8px', color: '#4F46E5' }} />
                AI Processing Activities
              </h4>
              <div style={{ 
                maxHeight: '140px', 
                overflowY: 'auto',
                display: 'flex',
                flexDirection: 'column',
                gap: '8px'
              }}>
                {aiInsights.map(insight => (
                  <div 
                    key={insight.id}
                    style={{
                      padding: '8px 12px',
                      backgroundColor: 'white',
                      borderRadius: '6px',
                      fontSize: '14px',
                      boxShadow: '0 1px 3px rgba(0, 0, 0, 0.05)',
                      borderLeft: '4px solid #4F46E5',
                      animation: 'fadeIn 0.5s ease-out'
                    }}
                  >
                    <div style={{ fontWeight: '500', marginBottom: '4px' }}>{insight.title}</div>
                    <div style={{ fontSize: '12px', color: 'rgba(107, 114, 128, 1)' }}>{insight.description}</div>
                  </div>
                ))}
                {aiInsights.length === 0 && aiSimulationState === 'idle' && (
                  <div style={{ color: 'rgba(107, 114, 128, 1)', fontSize: '14px', padding: '8px 0' }}>
                    Click "Run Simulation" to start AI optimization
                  </div>
                )}
              </div>
            </div>
            
            {(completedOptimizations.length > 0 || aiSimulationState === 'complete') && (
              <div>
                <h4 style={{ fontSize: '16px', fontWeight: '600', marginBottom: '12px', display: 'flex', alignItems: 'center' }}>
                  <Layers size={16} style={{ marginRight: '8px', color: '#10B981' }} />
                  Optimization Results
                </h4>
                <div style={{ 
                  maxHeight: '140px', 
                  overflowY: 'auto',
                  display: 'flex',
                  flexDirection: 'column',
                  gap: '8px'
                }}>
                  {completedOptimizations.map(opt => (
                    <div 
                      key={opt.id}
                      style={{
                        padding: '8px 12px',
                        backgroundColor: 'white',
                        borderRadius: '6px',
                        fontSize: '14px',
                        boxShadow: '0 1px 3px rgba(0, 0, 0, 0.05)',
                        borderLeft: '4px solid #10B981',
                        display: 'flex',
                        justifyContent: 'space-between',
                        alignItems: 'center',
                        animation: 'slideIn 0.5s ease-out',
                        cursor: 'pointer',
                        transition: 'transform 0.2s',
                        transform: selectedMetric === opt.id ? 'scale(1.02)' : 'scale(1)',
                      }}
                      onClick={() => setSelectedMetric(selectedMetric === opt.id ? null : opt.id)}
                    >
                      <div>
                        <div style={{ fontWeight: '500' }}>{opt.title}</div>
                        <div style={{ fontSize: '12px', color: 'rgba(107, 114, 128, 1)' }}>Impact: {opt.impact}</div>
                      </div>
                      <div style={{ 
                        color: '#10B981', 
                        fontWeight: '600',
                        fontSize: '16px'
                      }}>
                        {opt.value}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
        
        {aiSimulationState === 'complete' && (
          <div style={{
            padding: '12px 20px',
            backgroundColor: '#F3FAFA',
            borderTop: '1px solid rgba(0, 0, 0, 0.05)',
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center'
          }}>
            <div style={{ display: 'flex', alignItems: 'center' }}>
              <Activity size={16} style={{ color: '#10B981', marginRight: '8px' }} />
              <span style={{ fontWeight: '500', fontSize: '14px' }}>Total Performance Improvement: </span>
              <span style={{ color: '#10B981', fontWeight: '600', marginLeft: '4px' }}>+15.0%</span>
            </div>
            <button
              onClick={() => {
                setAiSimulationState('idle');
                setAiInsights([]);
                setCompletedOptimizations([]);
                setOptimizationProgress(0);
                setSelectedMetric(null);
              }}
              style={{
                backgroundColor: '#4F46E5',
                color: 'white',
                border: 'none',
                padding: '8px 12px',
                borderRadius: '4px',
                cursor: 'pointer',
                fontWeight: '500',
                fontSize: '14px'
              }}
            >
              Reset Simulation
            </button>
          </div>
        )}
        
        {/* Additional detailed sections after simulation completes */}
        {aiSimulationState === 'complete' && (
          <>
            {/* Detailed KPI improvements section */}
            <div style={{
              padding: '15px 20px',
              borderTop: '1px solid rgba(0, 0, 0, 0.05)',
            }}>
              <h4 style={{ 
                fontSize: '14px', 
                fontWeight: '600', 
                marginBottom: '12px',
                color: '#374151'
              }}>
                Detailed KPI Improvements
              </h4>
              <div style={{
                display: 'grid',
                gridTemplateColumns: 'repeat(3, 1fr)',
                gap: '10px'
              }}>
                {[
                  { 
                    label: 'On-Time Performance', 
                    before: '88.5%', 
                    after: '94.1%', 
                    gain: '+5.6%',
                    color: '#3B82F6',
                    icon: Clock
                  },
                  { 
                    label: 'Fuel Efficiency', 
                    before: '82.3%', 
                    after: '87.6%', 
                    gain: '+5.3%',
                    color: '#10B981',
                    icon: Gauge
                  },
                  { 
                    label: 'Crew Utilization', 
                    before: '76.8%', 
                    after: '85.2%', 
                    gain: '+8.4%',
                    color: '#8B5CF6',
                    icon: Users
                  },
                  { 
                    label: 'Maintenance Cost', 
                    before: '$134,250', 
                    after: '$119,890', 
                    gain: '-10.7%',
                    color: '#F97316',
                    icon: Wrench
                  },
                  { 
                    label: 'Gate Turnaround Time', 
                    before: '42 min', 
                    after: '38 min', 
                    gain: '-9.5%',
                    color: '#EC4899',
                    icon: Clock
                  },
                  { 
                    label: 'Customer Satisfaction', 
                    before: '82%', 
                    after: '88%', 
                    gain: '+6.0%',
                    color: '#6366F1',
                    icon: Cpu
                  }
                ].map((item, index) => {
                  const Icon = item.icon;
                  return (
                    <div 
                      key={index}
                      style={{
                        backgroundColor: 'white',
                        borderRadius: '8px',
                        padding: '12px',
                        boxShadow: '0 1px 3px rgba(0, 0, 0, 0.05)',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '12px',
                        animation: `fadeIn 0.5s ease-out ${index * 0.1}s both`
                      }}
                    >
                      <div style={{
                        width: '40px',
                        height: '40px',
                        borderRadius: '8px',
                        backgroundColor: `${item.color}10`,
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center'
                      }}>
                        <Icon size={20} color={item.color} />
                      </div>
                      <div>
                        <div style={{ fontSize: '13px', color: '#6B7280', marginBottom: '4px' }}>
                          {item.label}
                        </div>
                        <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                          <span style={{ 
                            fontSize: '12px', 
                            color: '#9CA3AF',
                            textDecoration: 'line-through'
                          }}>
                            {item.before}
                          </span>
                          <span style={{ 
                            fontSize: '14px', 
                            fontWeight: '600',
                            color: '#374151'
                          }}>
                            {item.after}
                          </span>
                          <span style={{
                            fontSize: '12px',
                            color: item.gain.startsWith('+') ? '#10B981' : '#EF4444',
                            fontWeight: '500'
                          }}>
                            {item.gain}
                          </span>
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
            
            {/* Recommendations and Next Steps */}
            <div style={{
              padding: '15px 20px',
              borderTop: '1px solid rgba(0, 0, 0, 0.05)',
            }}>
              <h4 style={{ 
                fontSize: '14px', 
                fontWeight: '600', 
                marginBottom: '12px',
                color: '#374151',
                display: 'flex',
                alignItems: 'center'
              }}>
                <Brain size={16} style={{ marginRight: '8px', color: '#4F46E5' }} />
                AI Recommendations & Next Steps
              </h4>
              <div style={{
                display: 'grid',
                gridTemplateColumns: 'repeat(2, 1fr)',
                gap: '10px'
              }}>
                {[
                  {
                    title: 'Apply Crew Schedule Optimization',
                    description: 'New schedule reduces fatigue by 18% while improving coverage',
                    priority: 'High',
                    timeframe: 'Within 48 hours'
                  },
                  {
                    title: 'Implement Fuel Route Optimization',
                    description: 'Can save up to 230,000 gallons annually with new routes',
                    priority: 'High',
                    timeframe: 'Next flight cycle'
                  },
                  {
                    title: 'Update Maintenance Schedule',
                    description: 'Preventative maintenance timing optimized for minimal disruption',
                    priority: 'Medium',
                    timeframe: 'Within 1 week'
                  },
                  {
                    title: 'Review Gate Allocation Algorithm',
                    description: 'New algorithm reduces taxiing time and improves connectivity',
                    priority: 'Medium',
                    timeframe: 'Within 2 weeks'
                  }
                ].map((item, index) => (
                  <div 
                    key={index}
                    style={{
                      backgroundColor: 'white',
                      borderRadius: '8px',
                      padding: '12px',
                      boxShadow: '0 1px 3px rgba(0, 0, 0, 0.05)',
                      animation: `fadeIn 0.5s ease-out ${0.3 + index * 0.1}s both`
                    }}
                  >
                    <div style={{ 
                      fontSize: '14px', 
                      fontWeight: '600', 
                      color: '#374151',
                      marginBottom: '6px'
                    }}>
                      {item.title}
                    </div>
                    <div style={{ 
                      fontSize: '13px', 
                      color: '#6B7280',
                      marginBottom: '8px'
                    }}>
                      {item.description}
                    </div>
                    <div style={{ 
                      display: 'flex', 
                      justifyContent: 'space-between'
                    }}>
                      <div style={{ 
                        display: 'flex',
                        alignItems: 'center',
                        gap: '4px'
                      }}>
                        <span style={{ 
                          fontSize: '12px', 
                          color: '#9CA3AF'
                        }}>
                          Priority:
                        </span>
                        <span style={{ 
                          fontSize: '12px',
                          fontWeight: '500',
                          color: item.priority === 'High' ? '#EF4444' : '#F97316'
                        }}>
                          {item.priority}
                        </span>
                      </div>
                      <div style={{ 
                        display: 'flex',
                        alignItems: 'center',
                        gap: '4px'
                      }}>
                        <span style={{ 
                          fontSize: '12px', 
                          color: '#9CA3AF'
                        }}>
                          Timeframe:
                        </span>
                        <span style={{ 
                          fontSize: '12px',
                          fontWeight: '500',
                          color: '#374151'
                        }}>
                          {item.timeframe}
                        </span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </>
        )}
      </div>
      
      {/* Add style for animations */}
      <style>{`
        @keyframes pulse {
          0%, 100% { opacity: 1; }
          50% { opacity: 0.5; }
        }
        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        @keyframes slideIn {
          from { transform: translateX(20px); opacity: 0; }
          to { transform: translateX(0); opacity: 1; }
        }
        @keyframes fadeInScale {
          from { opacity: 0; transform: scale(0.8) translate(0, 0); }
          to { opacity: 1; transform: scale(1) translate(0, 0); }
        }
        @keyframes drawLine {
          from { stroke-dashoffset: 300; }
          to { stroke-dashoffset: 0; }
        }
      `}</style>
    </div>
  );
};

export default OperationalMetrics; 